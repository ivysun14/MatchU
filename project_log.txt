05/15/2023
==========
To build a simple backend server:
1. Open VSCode to an empty directory
2. npm init -y => init package.json file
3. npm install express => adds express to dependency
4. touch server.js => create blank file
5. change main in package.json from index.js to server.js

Basic setups:
const express = require('express'); // pull express packege
const app = express(); // app variable that can be used to configure the server
const PORT = 8080; // define a port

Fire api:
1. in terminal: node .
2. paste url into web server

Using the listen method of an app object to start a server and listen for incoming HTTP requests on a specified port.
The listen method takes two arguments: the port number on which the server should listen for requests, and a callback
function that will be called once the server starts listening.
app.listen(
    PORT,
    () => console.log(`it's alive on http://localhost:${PORT}`)
);

Using GET to create a route to http://localhost:8080/profile and run the handler function when the route is requested.
req here stands for incoming data, and res stands for data sent back to client.
app.get('/profile', (req, res) => {
    res.status(200).send('This is the profile page')
});
We used similar app.get commands to create another 3 routes to 3 pages: home(/), match_display, chat.
app.get('/', (req, res) => {
    res.status(200).send('This is the home (login) page')
});

app.get('/match_display', (req, res) => {
    res.status(200).send('This is the match display page')
});

app.get('/chat', (req, res) => {
    res.status(200).send('This is the chat page')
});


05/15/2023 Changes
==================
Use a newer node version: nvm use 14.20.1
Install development dependencies:
npm i --save-dev nodemon //refresh server with every change without manually restart
npm i --save-dev dotenv //allow pulling of env variables from .env file
In scripts in package.json file, replace test with "devStart": "nodemon server.js"
Invoke server with npm run devStart => [nodemon] starting `node server.js`, so now using nodemon to start the server
Create .env and .gitignore file, add .env and node_modules to .gitignore file

Integrate MongoDB with backend server:
Create a MongoDB Atlas account and registor for a free database following: https://www.mongodb.com/languages/javascript/mongodb-and-npm-tutorial
Install the dependencies:
npm install mongodb
npm i mongoose
The code for connection looks like:
//...
const mongoose = require('mongoose')
//...
mongoose.connect('mongodb+srv://ivysun14:cthy999n58h101s@matchu.45hzd8g.mongodb.net/?retryWrites=true&w=majority',
    { useNewUrlParser: true },
    () => console.log('Connected to DB')
);
//...
Error connecting to database:  UnhandledPromiseRejectionWarning: MongooseError: Mongoose.prototype.connect() no longer accepts a callback
Solved the error by uninstalling mongoose v7.1.1 and downgrade to mongoose v6.10.0.

We removed the hard-coded URL into the .env file so the password will not be public.
In .env file we wrote: DB_CONNECTION=mongodb+srv://ivysun14:cthy999n58h101s@matchu.45hzd8g.mongodb.net/?retryWrites=true&w=majority
In server.js we changed the code to:
//...
const mongoose = require('mongoose'); // request mongoose package
require('dotenv/config');
//...
// connect to DB
mongoose.connect(
    process.env.DB_CONNECTION,
    { useNewUrlParser: true },
    () => console.log('Connected to DB')
);
//...

Create entries into the database:
1. create a new folder named models, this folder will hold schema for different database entries
2. Create a file named Profile.js, this is the file that specifies what a profile should contain
The Profile.js file looks like:
const mongoose = require('mongoose');

const ProfileSchema = mongoose.Schema({
    name: {
        type: String,
        required: true
    },
    gender: {
        type: String,
        required: true
    },
    major: {
        type: String,
        required: false
    }
});

module.exports = mongoose.model('Profiles', ProfileSchema);


Tutorial: https://www.youtube.com/watch?v=vjf774RKrLc


05/17/2023
==========
Server Setup Continued:

Used
	$ npm i -D nodemon
To install nodemon locally.

Now you can use
	$ npm run start:dev
To use nodemon for development, which enables you to visualize the changes you made by simply refresh the browser.

Added
	app.use(express.json());
	app.use(express.urlencoded());
And you can now use middle-ware and post via Postman.

Added
	app.use((req, res, next) => {
    		console.log(`${req.method}:${req.url}`);
    		next();
	});
Which will generate message for each routes.

Added MatchU/src folders, added MatchU/src/routers folder, added MatchU/src/routers/persons.js file, which contains a router for the persons list.

Added 
	app.use('/api/v1/persons', personsRoute);
Now you can get access to localhost:8080/api/v1/persons to get the personList.
And you can also get access to localhost:8080/api/v1/persons/someName to get the single object of a person with "name"===someName.

Added MatchU/src/routers/campuses.js file, which contains a router for the campuses list.

Added a query parameter for campuses.js, and now you can access addresses like
    http://localhost:8080/api/v1/campuses/?miles=10
To get the list of campuses within 10 miles.

The above two files are just for example purposes, and they should be modified to match the real requirments.


05/23/2023 - 05/25/2023
=======================
Deleted MatchU/models folder since the same information is already represented in MatchU/src/model.

Renamed ./src/routes/persons.js file to users.js to match the description in ./src/model/UserModel.js, and changed variables/routes in server.js accordinglly.

Modified the UserModel.js file, specifically modified the mongoose schema for user data so that it follows the
frontend react definition of the page "User Registration." The new UserModel.js file looks like:

    const mongoose = require('mongoose');
    const userSchema = new mongoose.Schema(
    {
        username: {
            type: String,
            required: [true, 'A user must have a name'],
            unique: true,
            maxlength: [15, 'A posted name cannot exceed 15 characters']
        },

        password: {
            type: String,
            required: [true, 'Please provide a password'],
            minlength: [8, 'A password needs to have at least a length of 8'],
            select: false
        },

        age: {
            type: Number,
            min: 18,
            max: 30,
            required: [true, 'A user must input an age']
        },

        uc_campus: {
            type: String,
            required: [true, 'A user must have a college']
        },

        biological_gender: {
            type: String,
            required: [true, 'A user must have a gender']
        },

        major_area: {
            type: String,
            required: [true, 'A user must have a major']
        },

        about_yourself: {
            type: String,
            required: false,
            maxlength: [300, 'A description cannot exceed 300 characters']
        },

        preferred_biological_gender: {
            type: String,
            required: [true, 'A user must provide a preferrd biological gender']
        },

        profile_picture: {
            data: Buffer,
            contentType: String
        }
    });
    module.exports = mongoose.model('Users', userSchema);

Reformatted the way the server would control different routes and respond to HTTP requests. Now within MatchU/src/, there are three directories. They are:
    1. controllers
    2. models
    3. routes
Specifically for the "user registration" pages, we define the following files to handle and store user data:
    MatchU/src/controllers/userController.js
    MatchU/src/models/userModel.js
    MatchU/src/routes/users.js

In users.js (router file), we directed router behavior to be defined by the user controller:

    const express = require('express');
    const router = express.Router();
    const userContoller = require('../controllers/userController');

    router.get('/', userContoller.listUsers);
    router.post('/', userContoller.insertSingleUser);
    router.patch('/:id', userContoller.updateSingleUser);

    module.exports = router;

The behavior of get, post, patch are defined in the functions listUsers(), insertSingleUser(), updateSingleUser() in the userController file respectively.

In userController.js, we added definitions for HTTP behavior GET, POST, PATCH:

    const User = require('../models/userModel');

    // GET
    // get all users
    exports.listUsers = async (req, res) => {

        try {
            const users = await User.find({});
            res.json(users);
        } catch (error) {
            res.status(400).json({ message: error });
    }

    }

    // POST
    // insert a user into database
    exports.insertSingleUser = async (req, res) => {

        const newUser = new User({
            username: req.body.username,
            password: req.body.password,
            age: req.body.age,
            uc_campus: req.body.uc_campus,
            biological_gender: req.body.biological_gender,
            major_area: req.body.major_area,
            about_yourself: req.body.about_yourself,
            preferred_biological_gender: req.body.preferred_biological_gender,
            profile_picture: req.body.profile_picture
        });

        try {
            await newUser.save();
            res.json(newUser);
        } catch (error) {
            res.status(400).json({ message: error });
        }

    }

    // PATCH
    // update a user in the database
    exports.updateSingleUser = async (req, res) => {

        let paramID = req.params.id;
        let username = req.body.username;

        try {
            const updateUser = await User.updateOne({ _id: paramID }, { username: username });
            res.json(updateUser);
        } catch (error) {
            res.status(400).json({ message: error });
        }

    }

In server,js, modified the router for user registration page. Now import the router with:
    const usersRoute = require('./src/routes/users');
and set up the middleware:
    app.use('/registration', usersRoute);

Now we have the user data schema linked to the mongoDB database, we added into the database some dummy data, which are the commented out code
in the userContoller.js file. (These data has already been eliminated after testing.)

We would now like to connect the frontend React registration page with the backend server, specifically we wish to achieve:
1. Once the user inputted registration data, it should be stored into the backend mongoDB database.
2. The inputted user registration data should follow the rules defined in userModel.js.

Installed additional dependency:
    npm install cors
CORS (Cross-Origin Resource Sharing) is a browser security feature that restricts cross-origin HTTP requests with other servers and specifies 
which domains access your resources.

Added in server.js:
    //...
    const cors = require('cors');
    //...
    app.use(cors());
    //...
We now allow cross-origin requests.


************** SUGGESTIONS TO FRONT END **************
Hint messages on registation page: input restrictions
    EX. password must be of at least length 8.
******************************************************

Here we encountered an error upon tesing:
+++++
ERROR: Data entered into frontend were not communicating to the backend database.
+++++
+++++
DEBUG: Inside userModel.js, data schema parameter names DID NOT match with definitions in Register.js. Backend definitions and frontend definitions do not match,
thus causing the error.
+++++

Therefore, we modified the server-end userModel.js file, such that the parameter names matches with:
    { id, password, age, campus, gender, major, aboutyou, pregender };
which is a definition in the front end. Also changed the POST and PATCH methods in userContoller.js, 
such that the parameter names match with new names corrected in userModel.js.

Finally to connect the frontend and the backend, in MatchU/app/src/Register.js changed the "fetch" URL:

    //...
    const handlesubmit = (e) => {
        e.preventDefault();
        let regobj = { id, password, age, campus, gender, major, aboutyou, pregender };
        //console.log(regobj);
        //if (!IsValid){console.log(IsValid);}
        if (IsValid()) {
            fetch("http://localhost:8080/registration", {
                method: "POST",
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(regobj) //converts a JavaScript object or value into a JSON string representation
            }).then((res) => {
                toast.success('Registered successfully.');
                navigate('/login');
            }).catch((err) => {
                toast.error('Failed :' + err.message);
            });
        }
    }
    //...

The only feature that still needs to be implemented for user registration is image storage and display. (How to display? Where to store?)
--> https://www.geeksforgeeks.org/upload-and-retrieve-image-on-mongodb-using-mongoose/

Next, implemented features for the login page. Again we used the files:
1. userModel.js
2. userController.js
3. users.js

We added a GET implementation in users.js:
    router.get('/:username', userContoller.listSpecificUsers);
to accompany the way the front end set for querying the database.

Then added corresponding implementation .listSpecificUsers() in the controller file.

++++++
ERROR: Password is always invalid even when there is clearly a match between the username and inputted password.
++++++
++++++
DEBUG: The parameter password is set to "select": false in the schema, which means that the field will not be included
++++++ by default when querying documents from the database.

Originally in userController.js, we wrote the implementation:

    exports.listSpecificUsers = async (req, res) => {

        let username = req.params;

        try {
            const theUser = await User.findOne({ username });
            res.json(theUser);
        } catch (error) {
            res.status(400).json({ message: error });
        }

    }

Now we explicitly wrote in the function using the select() method to tell the server that password should be included when querying items from the database:


    exports.listSpecificUsers = async (req, res) => {

        let username = req.params;

        try {
            const theUser = await User.findOne({ username }).select('+password');
            res.json(theUser);
        } catch (error) {
            res.status(400).json({ message: error });
        }

    }

Finally in app/src/Login.js changed the URL:

    const ProceedLogin = (e) => {
        e.preventDefault();
        if (validate()) {
            fetch('http://localhost:8080/registration/' + username).then((res) => {
                return res.json();
            }).then()

            //...
        }
    }

Now when inputting username "Kate" and password "testuser", show successful login and jump to match page.

Add dummy date through the React interface. Set up one test case for each campus.

++++++
ERROR: Only the first user can be added to the database. The second and later registrations would not be added to the mongo database.
++++++
++++++
DEBUG: MongoDB Atlas enforced unique indexes, since we onced changed parameter "username" to "id", we now have to manually delete the username index
++++++ in MongoDB databse. Otherwise it will always be null and thus impeding the UNIQUE requirement.

Postman error message upon POST request:

{
    "message": {
        "index": 0,
        "code": 11000,
        "keyPattern": {
            "username": 1
        },
        "keyValue": {
            "username": null
        }
    }
}

Deleted username index in mongodb atlas.
Successfully added 9 dummy cases, one for each UC Campus.


Test to login when there are multiple data in the database.

++++++
ERROR: Always find the first inserted data which is "Kate" even when query with other usernames.
++++++
++++++
DEBUG: Username is nested inside id paramete. And also use {username} to get just the username instead of a key-value pair.
++++++ 

Modified function:

    exports.listSpecificUsers = async (req, res) => {

        try {
            let { username } = req.params;
            const theUser = await User.findOne({ id: username }).select('+password');
            res.json(theUser);
        } catch (error) {
            res.status(400).json({ message: error });
        }

    }

Now we have a fully functional login and registration page with only the picture feature missing.


05/28/2023
=======================
Display Page and Filter

Created a file "Display_test.json" under "app/src/" directory, which functions as the test database.
Created a file "Display.css" under "app/src/" directory, which regulates the styles of elements being displayed.

The slogan at very top is constructed.

The main page is now splitted into 2 parts: left-container and right-container.
left-container is used for selecting filters, and the right containers is used for showing result and advanced searching by keywords.

Now completed the css file for styling each chunk of user's data in the right-container. 
The chunk is separated into smaller parts:
.userContainer: defines the whole chunk
.userImage: defines the user's profile image
.userInfo: defines the user's information. e.g., name, age, major, etc.
.innerUserContainer: wraps userImage and userInfo, so that they can be listed in parallel.
.aboutMeContainer: defines the user's "aboutyou", and makes it to be listed under innerUserContainer for aesthetic.
.profileUrl: defines and lists the user's personal profile's url. (this should be changed to something else I suppose?)

Then used
    import testData from './Display_testDB.json';
to import the test database and store it as "testData", and
    const testUser = testData[0];
to simulate the matching display for a user.

Used
    <ul>
        {testData.map((user,index) => (
            <li>
                <div class="userContainer">
                    ...
                </div>
            </li>
        ))}
    </ul>
To dynamically iterate and list every user in testData.

Set 4 selection fields for filters:
Age Range (ageRange): within how many years the target partner is older/younger than the user being matched.
UC Campus (campus): which campus the target parter is at.
Major Area (major): which major the target parter is in.
Preferred Biology Sex (pregender): which biological gender is the target partner of.

Completed html part so that the selection field and options can be shown correctly.

Now used 
    import { useState } from "react";
and
    const [ageRange, ageRangechange] = useState("");
    const [campus, campuschange] = useState("");
    const [major, majorchange] = useState("");
    const [pregender, pregenderchange] = useState("");
to store the changes of filter into each accroding variable.

Then with syntax similar to
    <select value={campus} onChange={e => campuschange(e.target.value)} className="form-control">
and a simple handleSubmit() function
    const handleSubmit = (e) => {
    e.preventDefault();
    ...
    }
We can successfully update and store the filter status each time we select an option.

Now, declared a new array filteredUsers to contain the filtered and eliminated testData.
const filteredUsers = testData.filter(user =>
    (((parseInt(user.age) >= parseInt(testUser.age) - parseInt(ageRange)) &&
    (parseInt(user.age) <= parseInt(testUser.age) + parseInt(ageRange))) ||
    ageRange === "")
    &&
    (user.campus === campus ||
    campus === "")
    &&
    (user.major === major ||
    major === "")
    &&
    ((user.gender === pregender) ||
    pregender === "")
  );

Besides, the 
    <ul>
        {testData.map((user,index) => ( ... ))}
is changed to 
    <ul>
        {filteredUsers.map((user,index) => ( ... ))}
So the right-container would only show the filtered users.

At this moment, the filters can correctly work to find specific target users matching requirements.

Now a new feature is added: advanced search by keywords.

At the top of the right-container, a type-based searching window is added by using
    <div>
            <label for="searchbox" style={{fontWeight: 'bold', marginRight: '4pt'}}>Search</label>
            <input class='input mb-3' type="search" id="searchbox" placeholder="Enter keywords..."></input>
    </div>

Now imported
    import { useEffect } from "react";
and
    useEffect(() => {live_Search();}, []);
to ensure that the keyword searching process is executed after the database is loaded by passing the empty [],
or a "TypeError: 'null' is not an object" would occur.

Then implemented a function liveSearch() to get the keyword and check if the userContainer contains the specific keyword(s):
    let cards = document.querySelectorAll('.userContainer')
    function liveSearch() {
        let search_query = document.getElementById("searchbox").value;
        for (var i = 0; i < cards.length; i++) {
            if(cards[i].textContent.toLowerCase()
                    .includes(search_query.toLowerCase())) {
                cards[i].classList.remove("is-hidden");
            } else {
                cards[i].classList.add("is-hidden");
            }
        }
    }
Also, the ".is-hidden" is defined in Display.css to hide the exclueded users.

Furthermore, to make the type-searching more natural, a delay in display is implemented:
    let typingTimer;               
    let typeInterval = 500;  
    let searchInput = document.getElementById('searchbox');

    searchInput.addEventListener('keyup', () => {
        clearTimeout(typingTimer);
        typingTimer = setTimeout(liveSearch, typeInterval);
    });
Thus, the type-based further search is completed.

The purpose of it can be shown by the following example:
say if you are a big fan of tennis, and you want to match with some one who also loves tennis,
whom may be quite likely to include this hobby in his/her "About Me". Then if you type "tennis"
in the searching area, you can further filter and quickly find your target partner. The reason
I didn't only use ".aboutMeContainer" to filter is that someone may also want to search by name.
For instance, if you are an Eric Clapton fanatic, and thus you really want to make friends with
someone called "Layla", then you can type and search for the name "Layla", which is actually 
inside ".innerUserContainer".

Things incomplete so far:
    1. Replace the test database with the real one.
    2. Replace the test user with the real one, whose name can be get from "Login" and use a
        query to direct to the specific matching page for him/her.
    3. Image.
    4. Redirecting to the next page after finding some one.

06/03/2023
=======================
Display Page Continued:

Now the user is the user logged in.

Now the user itself will not be displayed in display page.

06/05/2023
=======================
Clean up server-side code server.js. Specifically removed unnecessary routes. The current server.js file looks like:

    const express = require('express'); // pull express packege
    const cors = require('cors');
    const usersRoute = require('./src/routes/users'); // import the routes for users
    const app = express(); // app variable that can be used to configure the server
    const PORT = 8080; // define a port
    const mongoose = require('mongoose'); // request mongoose package
    require('dotenv/config'); // provide access to .env file

    // use middleware: function that executes when routes are being hit
    app.use(cors());
    app.use(express.json());
    app.use(express.urlencoded({ extended: true }));
    app.use((req, res, next) => {
        console.log(`${req.method}:${req.url}`);
        next();
    });
    app.use('/registration', usersRoute);

    // fire api on the server
    app.listen(
        PORT,
        () => console.log(`Running Express Server on http://localhost:${PORT}`)
    );

    // connect to DB
    mongoose.connect(
        process.env.DB_CONNECTION,
        { useNewUrlParser: true },
        () => console.log('Connected to DB')
    );

***************
Image display:
***************
Backend Changes:
--> Modified the userModel. Added an individual schema for storing images, and embedded this schema into the original user schema.
The current userModel.js file looks like:

const mongoose = require('mongoose');

// ***CHANGES***
// Define the image schema
const imageSchema = new mongoose.Schema({
  data: Buffer,
  contentType: String
});

// Define the user schema and include the embedded image schema
const userSchema = new mongoose.Schema(
  {
    id: {
      type: String,
      required: [true, 'A user must have a name'],
      unique: true,
      maxlength: [15, 'A posted name cannot exceed 15 characters']
    },

    password: {
      type: String,
      required: [true, 'Please provide a password'],
      minlength: [8, 'A password needs to have at least a length of 8'],
      select: false
    },

    age: {
      type: Number,
      min: 18,
      max: 30,
      required: [true, 'A user must input an age']
    },

    campus: {
      type: String,
      required: [true, 'A user must have a college']
    },

    gender: {
      type: String,
      required: [true, 'A user must have a gender']
    },

    major: {
      type: String,
      required: [true, 'A user must have a major']
    },

    aboutyou: {
      type: String,
      required: false,
      maxlength: [300, 'A description cannot exceed 300 characters']
    },

    pregender: {
      type: String,
      required: [true, 'A user must provide a preferrd biological gender']
    },

    // ***CHANGES***
    picture: {
      type: imageSchema, // Embed the image schema as a property
      required: [true, 'A user must provide a picture']
    }
  });

// ***CHANGES***
// create a model, give it a name, and provide the schema to use
//module.exports = mongoose.model('Users', userSchema);

// Create models based on the schemas
const User = mongoose.model('Users', userSchema);
const Image = mongoose.model('Images', imageSchema);

// Export the models
module.exports = {
  User,
  Image
};

--> Since the data models are changed, modified APIs accordingly. Inside userController.js, more packages were added:

//const User = require('../models/userModel');
const { User, Image } = require('../models/userModel');
const multer = require('multer');
const fs = require('fs');
const path = require('path');

// API Implementations...

--> And modified the POST method. So now when images are stored, they are by default stored in a more readable manner. Advantageous in
fetching user data on frontend since now when information is fetched, simple lines of code in frontend can display the image:

// POST
// insert a user with his/her image into database
exports.insertSingleUser = async (req, res) => {
    upload(req, res, (err) => {
        if (err) {
            console.log(err)
        }
        else {
            console.log(req.file);
            const newImage = new Image({
                data: fs.readFileSync(path.join('uploads/' + req.file.filename)),
                contentType: 'image/png/jpeg'
            });

            const newUser = new User({
                id: req.body.id,
                password: req.body.password,
                age: req.body.age,
                campus: req.body.campus,
                gender: req.body.gender,
                major: req.body.major,
                aboutyou: req.body.aboutyou,
                pregender: req.body.pregender,
                picture: newImage
                /*
                picture: {
                    data: req.file.filename,
                    contentType: 'image/png/jpeg'
                }
                */
            })

            newUser.save()
                .then(() => res.send('User profile and image successfully uploaded.'))
                .catch((err) => console.log(err));
        }
    })
}


Frontend Changes:
--> installed new package buffer:
    
    // in frontend React app
    npm install --save buffer

--> modified profile.js file, the added lines are as follow:

    // setups
    import React from 'react';
    // other imports...
    var Buffer = require('buffer/').Buffer; // declare buffer

    const Profile = () => {
        
        // declarations
        // added declaration:
        const [imageBuffer, setImageBuffer] = useState(null); // initialize field for image

        // other functions...

        // modified useEffect
        useEffect(() => {
            fetch('http://localhost:8080/registration/' + userName)
                .then((res) => res.json())
                .then((resp) => {
                    console.log(resp);

                    setId(resp.id);
                    setPassword(resp.password);
                    setAge(resp.age);
                    setCampus(resp.campus);
                    setGender(resp.gender);
                    setMajor(resp.major);
                    setAboutyou(resp.aboutyou);
                    setPregender(resp.pregender);
                    setImageBuffer(`data:${resp.picture.contentType};base64, ${Buffer.from(resp.picture.data.data).toString('base64')}`)
                });
            }, []); // Empty dependency array to run the effect only once

        // some other functions...

        // return part
        return (
            <form className='Profile' onSubmit={handlesubmit}>
                <div className='upper-container'>
                    <h2 className='color_text'>Welcome, {id}!</h2>
                    <div className='image-container'>
                        <img src={imageBuffer}></img>
                    </div>
                </div>
                <div className='lower-container'>
                
                // rest the same...
        )
    }
