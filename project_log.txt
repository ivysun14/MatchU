05/15/2023
==========
To build a simple backend server:
1. Open VSCode to an empty directory
2. npm init -y => init package.json file
3. npm install express => adds express to dependency
4. touch server.js => create blank file
5. change main in package.json from index.js to server.js

Basic setups:
const express = require('express'); // pull express packege
const app = express(); // app variable that can be used to configure the server
const PORT = 8080; // define a port

Fire api:
1. in terminal: node .
2. paste url into web server

Using the listen method of an app object to start a server and listen for incoming HTTP requests on a specified port.
The listen method takes two arguments: the port number on which the server should listen for requests, and a callback
function that will be called once the server starts listening.
app.listen(
    PORT,
    () => console.log(`it's alive on http://localhost:${PORT}`)
);

Using GET to create a route to http://localhost:8080/profile and run the handler function when the route is requested.
req here stands for incoming data, and res stands for data sent back to client.
app.get('/profile', (req, res) => {
    res.status(200).send('This is the profile page')
});
We used similar app.get commands to create another 3 routes to 3 pages: home(/), match_display, chat.
app.get('/', (req, res) => {
    res.status(200).send('This is the home (login) page')
});

app.get('/match_display', (req, res) => {
    res.status(200).send('This is the match display page')
});

app.get('/chat', (req, res) => {
    res.status(200).send('This is the chat page')
});


05/15/2023 Changes
==================
Use a newer node version: nvm use 14.20.1
Install development dependencies:
npm i --save-dev nodemon //refresh server with every change without manually restart
npm i --save-dev dotenv //allow pulling of env variables from .env file
In scripts in package.json file, replace test with "devStart": "nodemon server.js"
Invoke server with npm run devStart => [nodemon] starting `node server.js`, so now using nodemon to start the server
Create .env and .gitignore file, add .env and node_modules to .gitignore file

Integrate MongoDB with backend server:
Create a MongoDB Atlas account and registor for a free database following: https://www.mongodb.com/languages/javascript/mongodb-and-npm-tutorial
Install the dependencies:
npm install mongodb
npm i mongoose
The code for connection looks like:
//...
const mongoose = require('mongoose')
//...
mongoose.connect('mongodb+srv://ivysun14:cthy999n58h101s@matchu.45hzd8g.mongodb.net/?retryWrites=true&w=majority',
    { useNewUrlParser: true },
    () => console.log('Connected to DB')
);
//...
Error connecting to database:  UnhandledPromiseRejectionWarning: MongooseError: Mongoose.prototype.connect() no longer accepts a callback
Solved the error by uninstalling mongoose v7.1.1 and downgrade to mongoose v6.10.0.

We removed the hard-coded URL into the .env file so the password will not be public.
In .env file we wrote: DB_CONNECTION=mongodb+srv://ivysun14:cthy999n58h101s@matchu.45hzd8g.mongodb.net/?retryWrites=true&w=majority
In server.js we changed the code to:
//...
const mongoose = require('mongoose'); // request mongoose package
require('dotenv/config');
//...
// connect to DB
mongoose.connect(
    process.env.DB_CONNECTION,
    { useNewUrlParser: true },
    () => console.log('Connected to DB')
);
//...

Create entries into the database:
1. create a new folder named models, this folder will hold schema for different database entries
2. Create a file named Profile.js, this is the file that specifies what a profile should contain
The Profile.js file looks like:
const mongoose = require('mongoose');

const ProfileSchema = mongoose.Schema({
    name: {
        type: String,
        required: true
    },
    gender: {
        type: String,
        required: true
    },
    major: {
        type: String,
        required: false
    }
});

module.exports = mongoose.model('Profiles', ProfileSchema);


Tutorial: https://www.youtube.com/watch?v=vjf774RKrLc


05/17/2023
==========
Server Setup Continued:

Used
	$ npm i -D nodemon
To install nodemon locally.

Now you can use
	$ npm run start:dev
To use nodemon for development, which enables you to visualize the changes you made by simply refresh the browser.

Added
	app.use(express.json());
	app.use(express.urlencoded());
And you can now use middle-ware and post via Postman.

Added
	app.use((req, res, next) => {
    		console.log(`${req.method}:${req.url}`);
    		next();
	});
Which will generate message for each routes.

Added MatchU/src folders, added MatchU/src/routers folder, added MatchU/src/routers/persons.js file, which contains a router for the persons list.

Added 
	app.use('/api/v1/persons', personsRoute);
Now you can get access to localhost:8080/api/v1/persons to get the personList.
And you can also get access to localhost:8080/api/v1/persons/someName to get the single object of a person with "name"===someName.

Added MatchU/src/routers/campuses.js file, which contains a router for the campuses list.

Added a query parameter for campuses.js, and now you can access addresses like
    http://localhost:8080/api/v1/campuses/?miles=10
To get the list of campuses within 10 miles.

The above two files are just for example purposes, and they should be modified to match the real requirments.


05/23/2023 - 05/25/2023
=======================
Deleted MatchU/models folder since the same information is already represented in MatchU/src/model.

Renamed ./src/routes/persons.js file to users.js to match the description in ./src/model/UserModel.js, and changed variables/routes in server.js accordinglly.

Modified the UserModel.js file, specifically modified the mongoose schema for user data so that it follows the
frontend react definition of the page "User Registration." The new UserModel.js file looks like:

    const mongoose = require('mongoose');
    const userSchema = new mongoose.Schema(
    {
        username: {
            type: String,
            required: [true, 'A user must have a name'],
            unique: true,
            maxlength: [15, 'A posted name cannot exceed 15 characters']
        },

        password: {
            type: String,
            required: [true, 'Please provide a password'],
            minlength: [8, 'A password needs to have at least a length of 8'],
            select: false
        },

        age: {
            type: Number,
            min: 18,
            max: 30,
            required: [true, 'A user must input an age']
        },

        uc_campus: {
            type: String,
            required: [true, 'A user must have a college']
        },

        biological_gender: {
            type: String,
            required: [true, 'A user must have a gender']
        },

        major_area: {
            type: String,
            required: [true, 'A user must have a major']
        },

        about_yourself: {
            type: String,
            required: false,
            maxlength: [300, 'A description cannot exceed 300 characters']
        },

        preferred_biological_gender: {
            type: String,
            required: [true, 'A user must provide a preferrd biological gender']
        },

        profile_picture: {
            data: Buffer,
            contentType: String
        }
    });
    module.exports = mongoose.model('Users', userSchema);

Reformatted the way the server would control different routes and respond to HTTP requests. Now within MatchU/src/, there are three directories. They are:
    1. controllers
    2. models
    3. routes
Specifically for the "user registration" pages, we define the following files to handle and store user data:
    MatchU/src/controllers/userController.js
    MatchU/src/models/userModel.js
    MatchU/src/routes/users.js

In users.js (router file), we directed router behavior to be defined by the user controller:

    const express = require('express');
    const router = express.Router();
    const userContoller = require('../controllers/userController');

    router.get('/', userContoller.listUsers);
    router.post('/', userContoller.insertSingleUser);
    router.patch('/:id', userContoller.updateSingleUser);

    module.exports = router;

The behavior of get, post, patch are defined in the functions listUsers(), insertSingleUser(), updateSingleUser() in the userController file respectively.

In userController.js, we added definitions for HTTP behavior GET, POST, PATCH:

    const User = require('../models/userModel');

    // GET
    // get all users
    exports.listUsers = async (req, res) => {

        try {
            const users = await User.find({});
            res.json(users);
        } catch (error) {
            res.status(400).json({ message: error });
    }

    }

    // POST
    // insert a user into database
    exports.insertSingleUser = async (req, res) => {

        const newUser = new User({
            username: req.body.username,
            password: req.body.password,
            age: req.body.age,
            uc_campus: req.body.uc_campus,
            biological_gender: req.body.biological_gender,
            major_area: req.body.major_area,
            about_yourself: req.body.about_yourself,
            preferred_biological_gender: req.body.preferred_biological_gender,
            profile_picture: req.body.profile_picture
        });

        try {
            await newUser.save();
            res.json(newUser);
        } catch (error) {
            res.status(400).json({ message: error });
        }

    }

    // PATCH
    // update a user in the database
    exports.updateSingleUser = async (req, res) => {

        let paramID = req.params.id;
        let username = req.body.username;

        try {
            const updateUser = await User.updateOne({ _id: paramID }, { username: username });
            res.json(updateUser);
        } catch (error) {
            res.status(400).json({ message: error });
        }

    }

In server,js, modified the router for user registration page. Now import the router with:
    const usersRoute = require('./src/routes/users');
and set up the middleware:
    app.use('/registration', usersRoute);

Now we have the user data schema linked to the mongoDB database, we added into the database some dummy data, which are the commented out code
in the userContoller.js file. (These data has already been eliminated after testing.)

We would now like to connect the frontend React registration page with the backend server, specifically we wish to achieve:
1. Once the user inputted registration data, it should be stored into the backend mongoDB database.
2. The inputted user registration data should follow the rules defined in userModel.js.

Installed additional dependency:
    npm install cors
CORS (Cross-Origin Resource Sharing) is a browser security feature that restricts cross-origin HTTP requests with other servers and specifies 
which domains access your resources.

Added in server.js:
    //...
    const cors = require('cors');
    //...
    app.use(cors());
    //...
We now allow cross-origin requests.


************** SUGGESTIONS TO FRONT END **************
Hint messages on registation page: input restrictions
    EX. password must be of at least length 8.
******************************************************

Here we encountered an error upon tesing:
+++++
ERROR: Data entered into frontend were not communicating to the backend database.
+++++
+++++
DEBUG: Inside userModel.js, data schema parameter names DID NOT match with definitions in Register.js. Backend definitions and frontend definitions do not match,
thus causing the error.
+++++

Therefore, we modified the server-end userModel.js file, such that the parameter names matches with:
    { id, password, age, campus, gender, major, aboutyou, pregender };
which is a definition in the front end. Also changed the POST and PATCH methods in userContoller.js, 
such that the parameter names match with new names corrected in userModel.js.

Finally to connect the frontend and the backend, in MatchU/app/src/Register.js changed the "fetch" URL:

    //...
    const handlesubmit = (e) => {
        e.preventDefault();
        let regobj = { id, password, age, campus, gender, major, aboutyou, pregender };
        //console.log(regobj);
        //if (!IsValid){console.log(IsValid);}
        if (IsValid()) {
            fetch("http://localhost:8080/registration", {
                method: "POST",
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(regobj) //converts a JavaScript object or value into a JSON string representation
            }).then((res) => {
                toast.success('Registered successfully.');
                navigate('/login');
            }).catch((err) => {
                toast.error('Failed :' + err.message);
            });
        }
    }
    //...

The only feature that still needs to be implemented for user registration is image storage and display. (How to display? Where to store?)
--> https://www.geeksforgeeks.org/upload-and-retrieve-image-on-mongodb-using-mongoose/

Next, implemented features for the login page. Again we used the files:
1. userModel.js
2. userController.js
3. users.js

We added a GET implementation in users.js:
    router.get('/:username', userContoller.listSpecificUsers);
to accompany the way the front end set for querying the database.

Then added corresponding implementation .listSpecificUsers() in the controller file.

++++++
ERROR: Password is always invalid even when there is clearly a match between the username and inputted password.
++++++
++++++
DEBUG: The parameter password is set to "select": false in the schema, which means that the field will not be included
++++++ by default when querying documents from the database.

Originally in userController.js, we wrote the implementation:

    exports.listSpecificUsers = async (req, res) => {

        let username = req.params;

        try {
            const theUser = await User.findOne({ username });
            res.json(theUser);
        } catch (error) {
            res.status(400).json({ message: error });
        }

    }

Now we explicitly wrote in the function using the select() method to tell the server that password should be included when querying items from the database:


    exports.listSpecificUsers = async (req, res) => {

        let username = req.params;

        try {
            const theUser = await User.findOne({ username }).select('+password');
            res.json(theUser);
        } catch (error) {
            res.status(400).json({ message: error });
        }

    }

Finally in app/src/Login.js changed the URL:

    const ProceedLogin = (e) => {
        e.preventDefault();
        if (validate()) {
            fetch('http://localhost:8080/registration/' + username).then((res) => {
                return res.json();
            }).then()

            //...
        }
    }

Now when inputting username "Kate" and password "testuser", show successful login and jump to match page.

Add dummy date through the React interface. Set up one test case for each campus.

++++++
ERROR: Only the first user can be added to the database. The second and later registrations would not be added to the mongo database.
++++++
++++++
DEBUG: MongoDB Atlas enforced unique indexes, since we onced changed parameter "username" to "id", we now have to manually delete the username index
++++++ in MongoDB databse. Otherwise it will always be null and thus impeding the UNIQUE requirement.

Postman error message upon POST request:

{
    "message": {
        "index": 0,
        "code": 11000,
        "keyPattern": {
            "username": 1
        },
        "keyValue": {
            "username": null
        }
    }
}

Deleted username index in mongodb atlas.
Successfully added 9 dummy cases, one for each UC Campus.


Test to login when there are multiple data in the database.

++++++
ERROR: Always find the first inserted data which is "Kate" even when query with other usernames.
++++++
++++++
DEBUG: Username is nested inside id paramete. And also use {username} to get just the username instead of a key-value pair.
++++++ 

Modified function:

    exports.listSpecificUsers = async (req, res) => {

        try {
            let { username } = req.params;
            const theUser = await User.findOne({ id: username }).select('+password');
            res.json(theUser);
        } catch (error) {
            res.status(400).json({ message: error });
        }

    }

Now we have a fully functional login and registration page with only the picture feature missing.